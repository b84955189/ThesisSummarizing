#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
@File    :   gui.py    
@Contact :   lking@lking.icu
@Author :    Jason
@Date :      4/2/2022 4:33 PM
@Description  Python version-3.10

This file was generated by the Tkinter Designer by Parth Jadhav
https://github.com/ParthJadhav/Tkinter-Designer
"""
import time
from pathlib import Path

import tkinter.filedialog
import tkinter as tk
import threading

from func.ExcelFunc import get_workbook, get_comment_scores_data, get_teacher_scores_data, get_debate_scores_data, \
    close_workbook
from func.WordFunc import generate_word_to_file
from model.Config import Configs

OFFSET_X = 150
OFFSET_Y = 5
ROOT_PATH = Path(__file__).parent.parent
ASSETS_PATH = ROOT_PATH / Path("./assets")

window = ""
file_path = ""
entry_1 = ""
my_task_thread = ""
config = Configs()

# Default state
# stop_excel_task_thread_sign = False


def clear_tips():
    """
    Clear the GUI's TextArea Text
    @return: None
    """
    entry_1.config(state="normal")
    entry_1.delete(0.0, tk.END)
    entry_1.config(state="disable")


def append_tips(tips):
    """
    Append tips to the GUI's TextArea Text
    @param tips:
    @return: None
    """
    entry_1.config(state="normal")
    entry_1.insert(tk.END, tips)
    entry_1.config(state="disable")


def change_tips(tips):
    """
    Change the GUI's TextArea Text
    @param tips: tips
    @return: None
    """
    entry_1.config(state="normal")
    entry_1.delete(0.0, tk.END)
    entry_1.insert(0.0, tips)
    entry_1.config(state="disable")


def my_task(excel_path):
    """
    处理线程
    @param excel_path: 数据文件路径
    @return: None
    """
    try:
        window.after(0, clear_tips)
        window.after(0, append_tips, "正在处理···\n")
        # ---------------
        wb = get_workbook(excel_path)
        # 生成Word
        for model in get_comment_scores_data(wb):
            generate_word_to_file(model)
        for model in get_teacher_scores_data(wb):
            generate_word_to_file(model)
        for model in get_debate_scores_data(wb):
            generate_word_to_file(model)

        # ---------------
        window.after(0, clear_tips)
        window.after(0, append_tips, "处理完毕！\n文件已保存至out文件夹下...")
        # 延迟三秒显示 - 根据喜好设置
        time.sleep(3)
        window.after(0, clear_tips)
        window.after(0, append_tips, config.default_welcome_tips)
    except Exception as e:
        window.after(0, clear_tips)
        # Dev mode
        print("错误：", e)
        window.after(0, append_tips, ">>>错误！请重试！\n")
        time.sleep(3)
        window.after(0, clear_tips)
        window.after(0, append_tips, config.default_welcome_tips)
    finally:
        # 关闭数据信息工作簿
        close_workbook(wb)


def select_path():
    global file_path
    try:
        file_path = tk.filedialog.askopenfilename()
        # When no file selected occur
        if file_path == '':
            return
        global my_task_thread
        # Check thread whether alive
        if isinstance(my_task_thread, threading.Thread) and my_task_thread.is_alive():
            tk.messagebox.showerror(
                "操作异常!", "请稍等任务处理完毕!")
        else:
            # creat a thread to operate long-time task.
            my_task_thread = threading.Thread(target=my_task,
                                              args=(file_path,),
                                              name="my_task_thread")
            # start thread
            my_task_thread.start()
            # wait this thread util it completes its task.
            # excel_task_thread.join()

    except Exception as e:
        print(e)
        tk.messagebox.showerror(
            "文件格式错误!", "请再次选择文件！")
        change_tips(config.default_welcome_tips)
    finally:
        pass


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


# UI thread is single thread !!! If there have a long-time task , everything of
# operation in UI thread will be blocked for a while.
def start():
    global window
    window = tk.Tk()
    logo = tk.PhotoImage(file=ASSETS_PATH / "lking.icu.png")
    window.call('wm', 'iconphoto', window._w, logo)
    window.title(config.default_app_name)

    window.geometry("266x435")
    window.configure(bg="#FFFFFF")

    canvas = tk.Canvas(
        window,
        bg="#FFFFFF",
        height=435,
        width=267,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=OFFSET_Y)
    canvas.create_rectangle(
        116.0 - OFFSET_X,
        191.0,
        616.0,
        434.0,
        fill="#E71661",
        outline="")

    entry_image_1 = tk.PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        130.0,
        313.5,
        image=entry_image_1
    )
    global entry_1
    entry_1 = tk.Text(
        bd=0,
        bg="#E71661",
        highlightthickness=0,
        fg="White",

    )
    entry_1.insert("insert", config.default_welcome_tips)
    entry_1.config(state="disable")
    entry_1.place(
        x=10.0,
        y=204.0,
        width=245.0,
        height=217.0
    )

    image_image_1 = tk.PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        129.0,
        70.0,
        image=image_image_1
    )

    button_image_1 = tk.PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = tk.Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=select_path,
        relief="flat"
    )
    button_1.place(
        x=75.0,
        y=139.0,
        width=108.0,
        height=37.090911865234375
    )
    window.resizable(False, False)

    window.mainloop()


if __name__ == "__main__":
    # q = Queue()
    # print(ASSETS_PATH)
    start()
